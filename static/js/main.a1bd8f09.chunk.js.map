{"version":3,"sources":["components/Question/Question.js","App.js","serviceWorker.js","index.js"],"names":["Question","props","question","html","key","hasOwnProperty","push","className","onClick","setYourType","qindex","App","state","questions","yourtype","thinkingStyle","index","removeindex","count","splice","length","console","log","sorted","slice","sort","indexOf","setState","this","forEach","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iSA4BeA,G,YAzBE,SAACC,GAId,IAAIC,EAAYD,EAAMC,SAElBC,EAAO,GANa,WAQhBC,GACDF,EAASG,eAAeD,IACvBD,EAAKG,KACD,yBAAKC,UAAU,SAASC,QAAS,kBAAMP,EAAMQ,YAAYL,EAAKH,EAAMS,UAC9DR,EAASE,MAJ3B,IAAI,IAAIA,KAAOF,EAAW,EAAlBE,GAUR,OACI,yBAAKG,UAAU,YACVJ,KC0GEQ,E,2MA3HbC,MAAQ,CACNC,UAAW,CACT,CACE,EAAK,YACL,EAAK,aACL,EAAK,cACL,EAAK,iBACJ,CACD,EAAK,YACL,EAAK,WACL,EAAK,YACL,EAAK,eACJ,CACD,EAAK,uBACL,EAAK,WACL,EAAK,WACL,EAAK,YACJ,CACD,EAAK,YACL,EAAK,WACL,EAAK,WACL,EAAK,eACJ,CACD,EAAK,UACL,EAAK,aACL,EAAK,WACL,EAAK,aACJ,CACD,EAAK,UACL,EAAK,WACL,EAAK,UACL,EAAK,eACJ,CACD,EAAK,gBACL,EAAK,UACL,EAAK,cACL,EAAK,eACJ,CACD,EAAK,cACL,EAAK,eACL,EAAK,YACL,EAAK,eACJ,CACD,EAAK,UACL,EAAK,SACL,EAAK,gBACL,EAAK,kBACJ,CACD,EAAK,WACL,EAAK,gBACL,EAAK,YACL,EAAK,aACJ,CACD,EAAK,kBACL,EAAK,SACL,EAAK,cACL,EAAK,WACJ,CACD,EAAK,WACL,EAAK,YACL,EAAK,gBACL,EAAK,eACJ,CACD,EAAK,aACL,EAAK,YACL,EAAK,SACL,EAAK,eACJ,CACD,EAAK,kBACL,EAAK,gBACL,EAAK,eACL,EAAK,wBACH,CACF,EAAK,QACL,EAAK,WACL,EAAK,UACL,EAAK,kBAGTC,SAAU,CAAC,EAAG,EAAG,EAAG,GACpBC,cAAe,M,EAIjBN,YAAc,SAACO,EAAOC,GAClB,IAAIJ,EAAY,EAAKD,MAAMC,UACvBC,EAAW,EAAKF,MAAME,SACtBI,EAAQJ,EAASE,GAIrB,GAHAE,IACAJ,EAASE,GAASE,EAClBL,EAAUM,OAAOF,EAAa,GACN,IAArBJ,EAAUO,OAAc,CAE1BC,QAAQC,IAAIR,GACX,IAAIS,EAAST,EAASU,QACtBD,EAASA,EAAOE,OAChB,IAAIT,EAAQF,EAASY,QAAQH,EAAOT,EAASM,OAAS,IACtD,EAAKO,SAAS,CACZZ,cANW,CAAC,sBAAuB,sBAAuB,kBAAmB,mBAMxDC,KAGzB,EAAKW,SAAS,CACZb,SAAUA,EACVD,UAAWA,K,wEAIP,IAAD,OAEHV,EAAO,GAKX,OAJAyB,KAAKhB,MAAMC,UAAUgB,SAAQ,SAAC3B,EAAUc,GACpCb,EAAKG,KAAK,kBAAC,EAAD,CAAUI,OAAQM,EAAOd,SAAUA,EAAUO,YAAa,EAAKA,kBAE7EY,QAAQC,IAAInB,GAEV,yBAAKI,UAAU,OACVJ,EACAyB,KAAKhB,MAAMG,cAAgB,4BAAKa,KAAKhB,MAAMG,eAAsB,U,GAvH1De,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a1bd8f09.chunk.js","sourcesContent":["import React from 'react';\nimport \"./Question.css\";\n\nconst Question = (props) => {\n    \n  \n    \n    let question =  props.question;\n\n    let html = [];\n\n    for(let key in question) {\n        if(question.hasOwnProperty(key)) {\n            html.push(\n                <div className=\"option\" onClick={() => props.setYourType(key, props.qindex)}>\n                    { question[key] }\n                </div>\n            )\n        }\n    }\n\n    return (\n        <div className=\"question\">\n            {html}\n        </div>\n    )\n}\n\nexport default Question;","import React from 'react';\nimport './App.css';\nimport Question from './components/Question/Question';\n\nclass App extends React.Component {\n\n  state = {\n    questions: [\n      {\n        '0': 'realistic',\n        '1': 'analytical',\n        '2': 'imaginative',\n        '3': 'investigative'\n      }, {\n        '0': 'organised',\n        '1': 'critical',\n        '2': 'adaptable',\n        '3': 'inquisitive'\n      }, {\n        '0': 'getting to the point',\n        '1': 'debating',\n        '2': 'creating',\n        '3': 'relating'\n      }, {\n        '0': 'practical',\n        '1': 'academic',\n        '2': 'personal',\n        '3': 'adventurous'\n      }, {\n        '0': 'precise',\n        '1': 'systematic',\n        '2': 'flexible',\n        '3': 'inventive'\n      }, {\n        '0': 'orderly',\n        '1': 'sensible',\n        '2': 'sharing',\n        '3': 'independent'\n      }, {\n        '0': 'perfectionist',\n        '1': 'logical',\n        '2': 'cooperative',\n        '3': 'competitive'\n      }, {\n        '0': 'hardworking',\n        '1': 'intellectual',\n        '2': 'sensitive',\n        '3': 'risk-taking'\n      }, {\n        '0': 'planner',\n        '1': 'reader',\n        '2': 'people person',\n        '3': 'problem solver'\n      }, {\n        '0': 'memorise',\n        '1': 'think-through',\n        '2': 'associate',\n        '3': 'originate'\n      }, {\n        '0': 'wants direction',\n        '1': 'judger',\n        '2': 'spontaneous',\n        '3': 'changer'\n      }, {\n        '0': 'cautious',\n        '1': 'reasoning',\n        '2': 'communicating',\n        '3': 'discovering'\n      }, {\n        '0': 'practising',\n        '1': 'examining',\n        '2': 'caring',\n        '3': 'challenging'\n      }, {\n        '0': 'completing work',\n        '1': 'gaining ideas',\n        '2': 'interpreting',\n        '3': 'seeing possibilities'\n      },  {\n        '0': 'doing',\n        '1': 'thinking',\n        '2': 'feeling',\n        '3': 'experimenting'\n      }\n    ],\n    yourtype: [0, 0, 0, 0],\n    thinkingStyle: null\n  }\n\n  \n  setYourType = (index, removeindex) => {\n      let questions = this.state.questions;\n      let yourtype = this.state.yourtype;\n      let count = yourtype[index];\n      count++;\n      yourtype[index] = count;\n      questions.splice(removeindex, 1);\n      if(questions.length === 0) {\n        let types =  [\"Concrete Sequential\", \"Abstract Sequential\", \"Abstract Random\", \"Concrete Random\"]\n       console.log(yourtype);\n        let sorted = yourtype.slice();\n        sorted = sorted.sort();\n        let index = yourtype.indexOf(sorted[yourtype.length - 1])\n        this.setState({\n          thinkingStyle: types[index]\n        })\n      } \n      this.setState({\n        yourtype: yourtype,\n        questions: questions\n      });\n  }\n\n  render() {\n\n    let html = [];\n    this.state.questions.forEach((question, index) => {\n        html.push(<Question qindex={index} question={question} setYourType={this.setYourType}/>);\n    });\n    console.log(html);\n    return (\n      <div className=\"App\">\n          {html}\n          {this.state.thinkingStyle ? <h1>{this.state.thinkingStyle}</h1> : null}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}